type Astronaut {
  id: ID!
  name: String!
  missions: [Mission!]!
  healthData: [HealthData!]!
}

type Mission {
  id: ID!
  missionName: String!
  durationInOrbit: Int
  location: String
  planet: Planet!
  astronaut: Astronaut!
  events: [MissionEvent!]!
}

type HealthData {
  id: ID!
  timestamp: String!
  heartRate: Int
  bloodPressure: String
  oxygenSaturation: Float
  glucoseLevel: Float
  activity: String
  radiationExposure: Float
  notes: String
  mission: Mission!
}

type Planet {
  id: ID!
  name: String!
  size: String
  mass: String
}

type MissionEvent {
  id: ID!
  eventName: String!
  description: String
  timestamp: String!
  mission: Mission!
}

type Query {
  astronaut(id: ID!): Astronaut
  mission(id: ID!): Mission
  healthData(id: ID!): HealthData
  planet(id: ID!): Planet
}

type Mutation {
  createAstronaut(input: AstronautInput!): Astronaut
  createMission(input: MissionInput!): Mission
  createHealthData(input: HealthDataInput!): HealthData
  createPlanet(input: PlanetInput!): Planet
}

input AstronautInput {
  name: String!
}

input MissionInput {
  missionName: String!
  durationInOrbit: Int
  location: String
  planetId: ID!
  astronautId: ID!
}

input HealthDataInput {
  timestamp: String!
  heartRate: Int
  bloodPressure: String
  oxygenSaturation: Float
  glucoseLevel: Float
  activity: String
  radiationExposure: Float
  notes: String
  missionId: ID!
}

input PlanetInput {
  name: String!
  size: String
  mass: String
}

type Subscription {
  healthDataUpdated(missionId: ID!): HealthData
}
